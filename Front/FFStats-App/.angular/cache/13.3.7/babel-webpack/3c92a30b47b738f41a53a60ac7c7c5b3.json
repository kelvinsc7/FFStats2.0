{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/Services/mapa.service\";\nimport * as i2 from \"@app/Services/jogador.service\";\nimport * as i3 from \"ngx-bootstrap/modal\";\nimport * as i4 from \"ngx-toastr\";\nimport * as i5 from \"ngx-spinner\";\nimport * as i6 from \"@app/Services/partida.service\";\nimport * as i7 from \"@app/Services/estatistica.service\";\nimport * as i8 from \"@angular/router\";\nimport * as i9 from \"@angular/forms\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"ngx-bootstrap/tooltip\";\n\nfunction MapaListaComponent_tbody_35_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\", 18);\n    i0.ɵɵlistener(\"click\", function MapaListaComponent_tbody_35_tr_1_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const item_r5 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.detalheMapas(item_r5.id);\n    });\n    i0.ɵɵelementStart(1, \"th\", 14);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"th\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\", 14);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\", 14);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\", 14);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"th\")(18, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function MapaListaComponent_tbody_35_tr_1_Template_button_click_18_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const item_r5 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n\n      const _r2 = i0.ɵɵreference(38);\n\n      return ctx_r9.openModal($event, _r2, item_r5.id);\n    });\n    i0.ɵɵelement(19, \"i\", 20);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const item_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r5.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r5.mapaNome);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.getCalls(item_r5.calls));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.getTotalPartidas(item_r5));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.getBooyah(item_r5));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.getQtdeKill(item_r5.partidas));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.getMelhorJogador(item_r5));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.getMaiorCall(item_r5));\n  }\n}\n\nfunction MapaListaComponent_tbody_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵtemplate(1, MapaListaComponent_tbody_35_tr_1_Template, 20, 8, \"tr\", 17);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.mapaFiltrada);\n  }\n}\n\nfunction MapaListaComponent_tfoot_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tfoot\")(1, \"tr\")(2, \"td\", 21)(3, \"h4\");\n    i0.ɵɵtext(4, \"Nenhum mapa encontrada!\");\n    i0.ɵɵelementEnd()()()();\n  }\n}\n\nfunction MapaListaComponent_ng_template_37_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"p\");\n    i0.ɵɵtext(2, \"Deseja realmente efetuar a exclus\\u00E3o?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function MapaListaComponent_ng_template_37_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.confirm();\n    });\n    i0.ɵɵtext(4, \"Sim\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function MapaListaComponent_ng_template_37_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.decline();\n    });\n    i0.ɵɵtext(6, \"N\\u00E3o\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nexport let MapaListaComponent = /*#__PURE__*/(() => {\n  class MapaListaComponent {\n    constructor(mapaService, jogadorService, modalService, toastr, spinner, partidaService, estatisticaService, router) {\n      this.mapaService = mapaService;\n      this.jogadorService = jogadorService;\n      this.modalService = modalService;\n      this.toastr = toastr;\n      this.spinner = spinner;\n      this.partidaService = partidaService;\n      this.estatisticaService = estatisticaService;\n      this.router = router;\n      this.mapas = [];\n      this.mapaFiltrada = [];\n      this._filtromapa = '';\n      this.mapaId = 0;\n    }\n\n    get filtromapa() {\n      return this._filtromapa;\n    }\n\n    set filtromapa(value) {\n      this._filtromapa = value;\n      this.mapaFiltrada = this.filtromapa ? this.filtrarmapa(this.filtromapa) : this.mapas;\n    }\n\n    filtrarmapa(filtrarPor) {\n      filtrarPor = filtrarPor.toLowerCase();\n      return this.mapas.filter(mapa => mapa.mapaNome.toLowerCase().indexOf(filtrarPor) !== -1);\n    }\n\n    ngOnInit() {\n      this.spinner.show();\n      this.getmapas(); //this.QtdePartida();\n    }\n\n    getmapas() {\n      this.mapaService.getMapas().subscribe({\n        next: _mapa => {\n          this.mapas = _mapa;\n\n          for (const mapa of this.mapas) {\n            this.partidaService.getPartidaByMapaId(mapa.id).subscribe({\n              next: partida => {\n                mapa.partidas = partida;\n              },\n              error: error => {\n                this.toastr.error(\"Erro ao carregar estatísticas do jogador\", \"Erro!\");\n              }\n            });\n          }\n\n          this.mapaFiltrada = this.mapas; // this.carregaTotalPartida();\n          // this.carregaTotalBooyah()\n          // this.carregaKill();\n        },\n        error: error => {\n          this.spinner.hide(), this.toastr.error(\"Erro ao carregar mapas\", \"Erro!\");\n        },\n        complete: () => this.spinner.hide()\n      });\n    }\n\n    getQtdeKill(partidas) {\n      return partidas.reduce((totalKills, partida) => {\n        const killsInPartida = partida.estatisticas.reduce((acc, estatisticas) => acc + estatisticas.kill, 0);\n        return totalKills + killsInPartida;\n      }, 0);\n    }\n\n    getBooyah(mapa) {\n      if (!mapa.partidas) return 0;\n      return mapa.partidas.filter(p => p.posicao === 1).length;\n    }\n\n    getTotalPartidas(mapa) {\n      return mapa.partidas ? mapa.partidas.length : 0;\n    }\n\n    getCalls(calls) {\n      return calls.map(call => call.callCidade).join(' - ');\n    }\n\n    getMelhorJogador(mapa) {\n      var _a;\n\n      if (!mapa.partidas || mapa.partidas.length === 0) return 'Sem dados'; // Mapeia as estatísticas de kills por jogadorId\n\n      const killsPorJogador = {};\n\n      for (const partida of mapa.partidas) {\n        if (partida.estatisticas) {\n          for (const estatistica of partida.estatisticas) {\n            const jogadorId = estatistica.jogador.id; // Aqui garantimos que `jogador` é um objeto\n\n            if (killsPorJogador[jogadorId]) {\n              killsPorJogador[jogadorId] += estatistica.kill;\n            } else {\n              killsPorJogador[jogadorId] = estatistica.kill;\n            }\n          }\n        }\n      } // Encontra o jogadorId com o maior número de kills\n\n\n      let jogadorComMaisKillsId = null;\n      let maxKills = 0;\n\n      for (const jogadorId in killsPorJogador) {\n        if (killsPorJogador[jogadorId] > maxKills) {\n          maxKills = killsPorJogador[jogadorId];\n          jogadorComMaisKillsId = parseInt(jogadorId, 10);\n        }\n      } // Caso não tenha sido encontrado um jogador válido\n\n\n      if (jogadorComMaisKillsId === null) return 'Sem dados'; // Busca o nome do jogador com base no jogadorId\n\n      const jogadorComMaisKills = (_a = mapa.partidas.flatMap(partida => partida.estatisticas).find(estatistica => estatistica.jogador.id === jogadorComMaisKillsId)) === null || _a === void 0 ? void 0 : _a.jogador.jogadorNick;\n      return jogadorComMaisKills ? `${jogadorComMaisKills} (${maxKills} kills)` : 'Jogador não encontrado';\n    }\n\n    getMaiorCall(mapa) {\n      if (!mapa.partidas || mapa.partidas.length === 0) return 'Sem dados'; // Mapeia as contagens de chamadas (CallId) por mapa e armazena o callCidade correspondente\n\n      const callCount = {}; // Itera sobre as partidas do mapa\n\n      for (const partida of mapa.partidas) {\n        const callId = partida.callId; // Supondo que cada partida possui um campo callId\n\n        const callCidade = partida.call.callCidade; // Acessando o callCidade do objeto call\n\n        if (callCount[callId]) {\n          callCount[callId].count += 1; // Incrementa a contagem para este callId\n        } else {\n          callCount[callId] = {\n            count: 1,\n            callCidade\n          }; // Inicializa a contagem e armazena o callCidade\n        }\n      } // Encontra o CallId com a maior quantidade de partidas\n\n\n      let maiorCallCidade = '';\n      let maxPartidas = 0;\n\n      for (const callId in callCount) {\n        if (callCount[callId].count > maxPartidas) {\n          maxPartidas = callCount[callId].count;\n          maiorCallCidade = callCount[callId].callCidade; // Obtém o callCidade correspondente\n        }\n      }\n\n      return `${maiorCallCidade} (${maxPartidas} partidas)`;\n    }\n\n    openModal(event, template, id) {\n      event.stopPropagation();\n      this.mapaId = id;\n      this.modalRef = this.modalService.show(template, {\n        class: 'modal-sm'\n      });\n    }\n\n    confirm() {\n      var _a;\n\n      (_a = this.modalRef) === null || _a === void 0 ? void 0 : _a.hide();\n      this.spinner.show();\n      this.mapaService.deleteMapa(this.mapaId).subscribe(result => {\n        console.log(result);\n        this.toastr.success('Partida excluida com sucesso!', 'Sucesso!');\n        this.spinner.hide();\n        this.getmapas();\n      }, error => {\n        //console.error(error);\n        this.toastr.error('Erro ao tentar deletar o Evento', 'Erro:');\n        this.spinner.hide();\n      }, () => this.spinner.hide());\n    }\n\n    decline() {\n      var _a;\n\n      (_a = this.modalRef) === null || _a === void 0 ? void 0 : _a.hide();\n    }\n\n    detalheMapas(id) {\n      this.router.navigate([`mapas/detalhes/${id}`]);\n    }\n\n  }\n\n  MapaListaComponent.ɵfac = function MapaListaComponent_Factory(t) {\n    return new (t || MapaListaComponent)(i0.ɵɵdirectiveInject(i1.MapaService), i0.ɵɵdirectiveInject(i2.JogadorService), i0.ɵɵdirectiveInject(i3.BsModalService), i0.ɵɵdirectiveInject(i4.ToastrService), i0.ɵɵdirectiveInject(i5.NgxSpinnerService), i0.ɵɵdirectiveInject(i6.PartidaService), i0.ɵɵdirectiveInject(i7.EstatisticaService), i0.ɵɵdirectiveInject(i8.Router));\n  };\n\n  MapaListaComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapaListaComponent,\n    selectors: [[\"app-mapa-lista\"]],\n    decls: 39,\n    vars: 3,\n    consts: [[1, \"card\", \"rounded\", \"shadow-sm\", \"p-3\"], [1, \"d-flex\"], [1, \"mr-5\"], [\"routerLink\", \"/mapas/detalhes\", \"type\", \"button\", 1, \"btn\", \"btn-success\", \"d-flex\"], [1, \"fa\", \"fa-plus-circle\", \"my-1\"], [1, \"ml-1\", \"d-none\", \"d-sm-block\"], [1, \"flex-fill\"], [1, \"input-group\", \"mb-2\"], [1, \"input-group-prepend\"], [1, \"input-group-text\"], [\"type\", \"text\", \"placeholder\", \"Filtrar por Mapa\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"mt-3\"], [1, \"table\", \"table-striped\", \"table-light\", \"text-center\", \"table-hover\"], [1, \"thead-dark\"], [1, \"d-none\", \"d-md-table-cell\"], [4, \"ngIf\"], [\"template\", \"\"], [\"style\", \"cursor: pointer;\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [\"type\", \"button\", \"tooltip\", \"Excluir\", 1, \"btn\", \"btn-danger\", \"btn-md\", 3, \"click\"], [1, \"fa\", \"fa-trash\"], [\"colspan\", \"9\", 1, \"text-center\"], [1, \"modal-body\", \"text-center\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"mr-3\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]],\n    template: function MapaListaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"a\", 3);\n        i0.ɵɵelement(4, \"i\", 4);\n        i0.ɵɵelementStart(5, \"b\", 5);\n        i0.ɵɵtext(6, \"Novo Mapa\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"div\", 7)(9, \"div\", 8)(10, \"div\", 9);\n        i0.ɵɵtext(11, \"Filtro: \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function MapaListaComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.filtromapa = $event;\n        });\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(13, \"div\", 11)(14, \"table\", 12)(15, \"thead\", 13)(16, \"tr\")(17, \"th\", 14);\n        i0.ɵɵtext(18, \"#\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"th\");\n        i0.ɵɵtext(20, \"Mapa\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"th\");\n        i0.ɵɵtext(22, \"Cidades\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"th\");\n        i0.ɵɵtext(24, \"Qtde. Partidas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"th\");\n        i0.ɵɵtext(26, \"Booyah\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"th\", 14);\n        i0.ɵɵtext(28, \"Kills\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"th\", 14);\n        i0.ɵɵtext(30, \"Melhor Jogador\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"th\", 14);\n        i0.ɵɵtext(32, \"Maior Call\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"th\");\n        i0.ɵɵtext(34, \"Op\\u00E7\\u00F5es\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(35, MapaListaComponent_tbody_35_Template, 2, 1, \"tbody\", 15);\n        i0.ɵɵtemplate(36, MapaListaComponent_tfoot_36_Template, 5, 0, \"tfoot\", 15);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(37, MapaListaComponent_ng_template_37_Template, 7, 0, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngModel\", ctx.filtromapa);\n        i0.ɵɵadvance(23);\n        i0.ɵɵproperty(\"ngIf\", ctx.mapas && ctx.mapas.length);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.mapaFiltrada.length);\n      }\n    },\n    directives: [i8.RouterLinkWithHref, i9.DefaultValueAccessor, i9.NgControlStatus, i9.NgModel, i10.NgIf, i10.NgForOf, i11.TooltipDirective],\n    styles: [\"\"]\n  });\n  return MapaListaComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}